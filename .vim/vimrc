" Quita el modo compatible con vi
set nocompatible

" ######## PLUGINS ########
packadd minpac
call minpac#init()
command! Pack call minpac#update()

" Edición de texto.
call minpac#add("tpope/vim-repeat")
call minpac#add("tpope/vim-surround")
call minpac#add("godlygeek/tabular")
call minpac#add("tpope/vim-unimpaired")
call minpac#add("inkarkat/vim-ReplaceWithRegister")
call minpac#add("tommcdo/vim-exchange")

" Navegación por conjuntos de texto.
call minpac#add("kana/vim-textobj-user")
call minpac#add("kana/vim-textobj-lastpat")
call minpac#add("kana/vim-textobj-indent")
call minpac#add("kana/vim-textobj-entire")
call minpac#add("kana/vim-textobj-line")
call minpac#add("wellle/targets.vim")
call minpac#add("kana/vim-smartword")
call minpac#add("justinmk/vim-sneak")
call minpac#add("nelstrom/vim-visual-star-search")
call minpac#add("kana/vim-submode")

" Ruby.
call minpac#add("vim-ruby/vim-ruby")
call minpac#add("tpope/vim-projectionist")
call minpac#add("tpope/vim-rake")
call minpac#add("tpope/vim-bundler")
call minpac#add("tpope/vim-rails")
call minpac#add("tpope/vim-endwise")
call minpac#add("nelstrom/vim-textobj-rubyblock")

" Git.
call minpac#add("rbong/vim-flog")
call minpac#add("tpope/vim-fugitive")

" Otros lenguages.
call minpac#add("thomd/vim-jasmine")
call minpac#add("elixir-editors/vim-elixir")

" Apoyo a varios lenguajes.
call minpac#add("tpope/vim-commentary")
call minpac#add("scrooloose/syntastic")
call minpac#add("AndrewRadev/splitjoin.vim")
call minpac#add("AndrewRadev/switch.vim")

" Integración con la shell
call minpac#add("mhinz/vim-grepper")
call minpac#add("epeli/slimux")
call minpac#add("junegunn/fzf")
call minpac#add("junegunn/fzf.vim")
call minpac#add("janko/vim-test")

" Aspecto.
call minpac#add("Lokaltog/vim-powerline")
call minpac#add("junegunn/goyo.vim")

" Sustituciones.
call minpac#add("tpope/vim-abolish")

" Autocompletado
call minpac#add("neoclide/coc.nvim", { "branch": "release"})

" Varios.
call minpac#add("mbbill/undotree")
call minpac#add("moll/vim-bbye")

" Aumenta el poder del % para if-else-end y más cosas (activa por defecto).
runtime macros/matchit.vim


" ######## TECLADO #######
noremap m j
noremap j m
noremap o k
noremap k o
noremap O K
noremap K O
noremap <C-k> <C-o>
noremap e l
noremap E L
noremap l e
noremap L E

" ######## ENTORNO ########
set shell=/bin/zsh

" Muerte a los números octales.
set nrformats=hex

" La tecla leader por defecto es la \, que está muy lejos.
let mapleader = "\<Space>"

" Por defecto sólo se recuerdan las últimas 20 órdenes. Subimos.
set history=10000

" Conserva historial de cambios al salir
set undofile
set undodir=~/.vim/undo
augroup vimrc
  autocmd!
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

" No expandir a la primera coincidencia de orden automáticamente al dar
" al tabulador, sino listar las posibles
" las opciones que más me gustan son list:longest y list:full
set wildmode=list:longest,full

" ###### ASPECTO ######
if has("gui_running")
  " Elimina las barras de edición y los menús
  set guioptions-=m
  set guioptions-=T
  " Quita el parpadeo del cursor.
  set guicursor+=a:blinkon0
endif

" Tema propio, basado en nuvola.
colorscheme autumnriver

" Resaltados de sintaxis en función del tipo de fichero
syntax on
filetype off
filetype plugin indent on

augroup usespaces
  autocmd!
  " Sintaxis con espacios
  autocmd FileType * setlocal ts=2 sts=2 sw=2 tw=0 expandtab

  " Mensajes de git con límite a 72 caracteres
  autocmd FileType gitcommit set tw=72
  autocmd FileType gitcommit nnoremap <buffer> é gqap

  " Resaltado de espacios a fin de línea y tabuladores
  set list listchars=trail:^,tab:^^
  autocmd Filetype help setlocal nolist
  " No mostrar espacios al final de la línea mientras se escribe
  autocmd InsertEnter * setlocal nolist
  autocmd InsertLeave * setlocal list
augroup END

" Incluye el título en la ventana (gvim lo hace automáticamente)
set title
" Incluye siempre la ruta del fichero que se edita
set laststatus=2

" Cambiar el cursor en Konsole, con o sin tmux.
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\007\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\007\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Powerline
set noshowmode
let g:Powerline_stl_path_style = "short"
" Requiere parchear una tipografía con powerline fontpatcher
let g:Powerline_symbols = "fancy"

" Muestra el número de línea
set number
" Muestra el número de línea al final de la pantalla (ya estaba activo por
" defecto)
set ruler
" Por defecto, no contrae las líneas cuando carga un nuevo buffer
set nofoldenable

" ####### COPIAR Y PEGAR ######
" Pegar a y del sistema
nmap Y "+y
nmap YY "+yy
vmap <C-c> "+y
nmap <C-p> "+gp
inoremap <C-r> <C-r><C-p>
" Pegar texto copiado en la línea de órdenes
cmap <C-v> <C-r>"
imap <C-v> <C-r>"

" Seleccionar el último texto copiado o pegado
nmap gV `[v`]


" ###### PASAR DE UN MODO A OTRO ######
" Pasar más fácilmente a la línea de órdenes
nnoremap , :
" Salir con la ñ de modo visual.
vmap ñ <C-c>
" Y lo mismo en la línea de órdenes
cmap ñ <C-c>
" Salir del modo inserción
inoremap <F3> <Esc>

" ###### ABRIR, CERRAR Y GUARDAR ######
" Grabar archivo tanto en modo normal como en edición
nmap s :w<cr>
imap <C-s> <Esc>:w<cr>a
" Salir del buffer actual, dejando la ventana
nmap <Leader>d :Bdelete<cr>
" Cierra la ventana.
nnoremap - q
nmap q :q<cr>
"Dejar sólo el buffer actual
nmap <Leader>o :on<cr>
" Abrir ficheros
nmap <Leader>v :vsplit<cr>
"
" Recupera la línea del fichero en la que estaba la última vez que se editó
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
" Permite quitar el buffer de la ventana aunque no se haya grabado
set hidden
" Directorios donde se guardan todos los archivos swp y backups
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" Cerrar quickfix y loclist
nmap cs :lclose<cr>:cclose<cr>

" ###### NAVEGACIÓN ######
" Navegación por líneas.
" 0 es más fácil de teclear que ^ en teclado español, así que intercambio sus
" funciones
nnoremap 0 ^
nnoremap ^ 0
vnoremap 0 ^
vnoremap ^ 0

" Ir a marcas
" ` es más útil que ' porque te lleva también a la columna, no sólo a la línea
nnoremap ñ `

" Desplazamientos
set rtp+=~/.vim/pack/minpac/start/vim-submode/
let g:submode_timeout = 0
let g:submode_always_show_submode = 1
let g:submode_keep_leaving_key = 1
call submode#enter_with("nav", "n", "", "<bs>")
call submode#map("nav", "n", "", "e", "<C-e>")
call submode#map("nav", "n", "", "u", "<C-u>")
call submode#map("nav", "n", "", "s", "<C-d>")
call submode#map("nav", "n", "", "b", "<C-b>")
call submode#map("nav", "n", "", "f", "<C-f>")
call submode#map("nav", "n", "", "<bs>", "<C-o>")
call submode#map("nav", "n", "", "l", "<C-i>")
call submode#map("nav", "n", "", "r", "{")
call submode#map("nav", "n", "", "v", "}")
call submode#map("nav", "n", "r", "<Tab>", "<Tab>")

" Navegación entre ventanas
nnoremap <tab> <C-w>w
" Abrir ventanas a la derecha en vez de a la izquierda
" y abajo en vez de arriba
set splitright
set splitbelow
" Navegación entre buffers
nmap <C-n> ]b
" Editar el buffer que se editaba justo antes de cambiar al actual
nmap <Leader><Leader> <C-^>
" Anterior y siguiente de quickfix y loclist
function! PrevInList()
  if get(getloclist(0, {'winid':0}), 'winid', 0)
    exec "normal [l"
  elseif len(getqflist())
    exec "normal [q"
  else
    exec "normal! ("
  endif
endfunction
function! NextInList()
  if get(getloclist(0, {'winid':0}), 'winid', 0)
    exec "normal ]l"
  elseif len(getqflist())
    exec "normal ]q"
  else
    exec "normal! )"
  endif
endfunction
nmap ( :call PrevInList()<cr>
nmap ) :call NextInList()<cr>

" Saltos
" Vim no distinque entre Ctrl-i y TAB, y uso tab para cambiar de ventana
nnoremap <C-l> <C-i>

" Ir a definición, con o sin coc
nmap _ <C-]>
autocmd FileType ruby nmap <buffer> _ <Plug>(coc-definition)

" Si el nombre del fichero incluye número de línea, vamos a esa línea con gf
set isfname-=:
nnoremap gf gF
nnoremap gF gf

" Saltar por historial de cambios
nnoremap U g;

" ###### BÚSQUEDAS ######
" Resalta el primer resultado de la búsqueda según tecleas
set incsearch
" Resalta todas las coincidencias de la búsqueda
set hlsearch
" Quita el resaltado de las coincidencias (lo vuelve a poner en la siguiente
" búsqueda)
nmap + :nohlsearch<cr>
" No diferencia buscar mayúsculas y minúsculas salvo que se escriba alguna
" mayúscula set ignorecase
set ignorecase
set smartcase
" Busca literal por defecto.
nnoremap / /\V

" ##### SUSTITUCIONES #####
" Repetir la última sustutición conserva los modificadores (:help &)
nnoremap & :&&<cr>
vnoremap & :&&<cr>


" ##### LÍNEA DE ÓRDENES #####
" Buscar el historial de forma incremental sin las flechas
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Atajos de readline
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>

" #### INTRODUCIR CARACTERES Y LÍNEAS EN MODO NORMAL ####
" Introducir líneas en blanco antes y después de la actual en modo normal
nmap <C-o> [<Space>
" C-m y <cr> son equivalentes en vim, así que no puedo asignar C-m en ciertos ficheros
autocmd FileType * if index(['qf','floggraph','fugitive','fugitiveblame','git'], &ft) < 0 | nmap <buffer> <C-m> ]<Space>

" Subir y bajar la línea actual
nmap <leader>o [e
nmap <leader>m ]e

" o y O no añaden comentario cuando se usan en línea con comentario
autocmd FileType * setlocal formatoptions-=o


" ######### RAILS #########
nmap <Leader>em :Emodel<Space>
nmap <Leader>ec :Econtroller<Space>
nmap <Leader>ev :Eview<Space>
nmap <Leader>eh :Ehelper<Space>
nmap <Leader>ej :Ejavascript<Space>
nmap <Leader>ed :Edecorator<Space>
nmap <Leader>ep :Epdf<Space>
nmap <Leader>ea :A<cr>
nmap <Leader>er :R<cr>
nmap <Leader>el :Elib<Space>
nmap <Leader>es :Espec<Space>
nmap <Leader>esm :Espec models/
nmap <Leader>esf :Espec features/
nmap <Leader>ess :Espec system/
nmap <Leader>esl :Espec lib/
nmap <Leader>esc :Espec controllers/
nmap <Leader>esv :Espec views/
nmap <Leader>ef :Efactory<Space>
nmap <Leader>ee :Eenvironment<Space>
nmap <Leader>ei :Einitializer<Space>
nmap <Leader>et :Elocale<Space>
" Atajos para tipos de ficheros.
let g:rails_projections = {
  \ "app/decorators/*_decorator.rb": { "command": "decorator" },
  \ "app/form_builders/*_form_builder.rb": { "command": "builder" },
  \ "app/pdfs/*.rb": { "command": "pdf" },
  \ "app/cells/*_cell.rb": { "command": "cell" },
  \ "app/cells/*.haml": { "command": "cview" },
  \ "spec/javascripts/fixtures/*.html": { "command": "jfixtures" },
  \ "spec/factories/*.rb": {"command": "factory"},
  \ "spec/requests/support/*.rb": {"command": "support"}}

" Bundler
nmap <Leader>b :Bopen<Space>

" ######## GIT ########
" atajos para Git
nmap gs :tab Gstatus<cr>
nmap gc :Gcommit<cr>i
nmap ga :Gcommit --amend<cr>
nmap gw :Gwrite<cr>
nmap gr :Gread<cr>
nmap gd :Gdiff<cr>
nmap gD :diffoff!<cr><c-w>h:bd<cr>
nmap ge :Gedit<cr>
nmap gb :Gblame<cr>
nmap gl :Flogsplit -path=%<cr>
vmap gl :Flogsplit<cr>
nmap gv :Flog<cr>
nmap gh :Flog -patch-search=
nmap gS :call Gitv_OpenGitCommand("diff", "tabedit")<cr>
" Cierra los buffers de fugitive automáticamente.
autocmd BufReadPost fugitive://* set bufhidden=delete
set tags^=.git/tags
autocmd FileType floggraph nmap <buffer> q gq

" ##### INTEGRACIÓN CON TMUX #####
" Simplifica localizar el directorio del fichero actual.
cnoremap %% <C-r>=expand('%:h').'/'<cr>
cnoremap %<Tab> <C-r>=expand('%:p')<cr>

nmap <Leader>tc :SlimuxShellRun<space>
nmap <Leader>td :SlimuxREPLSendLine<cr>
vmap <Leader>td :SlimuxREPLSendSelection<cr>

" Ejecutar tests
let test#strategy = "slimux"
let test#preserve_screen = 1
let test#ruby#bundle_exec = 0
let test#ruby#use_binstubs = 0
nmap <Leader>tl :TestNearest<cr>
nmap <Leader>tt :TestFile<cr>
nmap <Leader>tp :TestLast<cr>
nmap <Leader>tv :TestVisit<cr>

" ###### AUTOCOMPLETADO ######
" Con la opción por defecto, los mensajes de diagnóstico dan problemas
set updatetime=300
" Fuera mensaje de |ins-completion-menu|
set shortmess+=c

" Mismos atajos que en la línea de órdenes
inoremap <silent><expr> <C-n> pumvisible() ? "\<C-n>" : coc#refresh()

" Tabulador saca menú, navega por él, completa snippets, o indenta, dependiendo del contexto
inoremap <silent><expr> <tab>
  \ pumvisible() ? "\<C-n>" :
  \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<cr>" :
  \ <SID>check_back_space() ? "\<tab>" :
  \ coc#refresh()
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Tabulador para pasar de un lugar clave de snippet a otro
let g:coc_snippet_next = "<tab>"

" Usos de la palabra actual
nmap <Leader>re <Plug>(coc-references)
" Refactorizaciones
nmap <Leader>rn <Plug>(coc-rename)
nmap <Leader>rf <Plug>(coc-refactor)

" ###### OTROS PLUGINS ######
" Tabularize
" (requiere tabular, pero si pongo esta condición, no funciona)
nmap <Leader>l> :Tabularize /=><cr>
vmap <Leader>l> :Tabularize /=><cr>
nmap <Leader>l: :Tabularize /:\zs<cr>
vmap <Leader>l: :Tabularize /:\zs<cr>
nmap <Leader>l, :Tabularize /,\zs<cr>
vmap <Leader>l, :Tabularize /,\zs<cr>

" Surround con ERB
autocmd FileType eruby let b:surround_45 = "<% \r %>" " 45 es el ASCII de -
autocmd FileType eruby let b:surround_61 = "<%= \r %>" " 61 es el ASCII de =

" Comentar código
nmap <Leader>c <Plug>CommentaryLine
vmap <Leader>c <Plug>Commentary
nmap gm <Plug>Commentary
" Sobreescribo mapas por defecto, aunque no los uso
nmap gmu <Plug>Commentary<Plug>Commentary
nmap gmm <Plug>CommentaryLine

" Reemplazar registro
nmap R <Plug>ReplaceWithRegisterOperator
vmap R <Plug>ReplaceWithRegisterVisual
" Evito que se use el atajo original, aunque esto no lo use
nmap RR <Plug>ReplaceWithRegisterLine

" Syntastic
let g:syntastic_auto_loc_list = 1 " Abre automáticamente la lista de errores.
let g:syntastic_javascript_checkers = ["eslint"]
let g:syntastic_javascript_eslint_exe = "eslint --quiet"

" Undotree
nmap <leader>u :UndotreeToggle<cr>

" FZF
nnoremap <Leader>s :Files<cr>
nnoremap <Leader>h :History:<cr>
nnoremap <Leader>g :Tags<cr>

" Smartwords
nmap w <Plug>(smartword-w)
nmap b <Plug>(smartword-b)
nmap l <Plug>(smartword-e)
nmap ! <Plug>(smartword-ge)
vmap w <Plug>(smartword-w)
vmap b <Plug>(smartword-b)
vmap l <Plug>(smartword-e)
vmap ! <Plug>(smartword-ge)

" Sneak
let g:sneak#s_next = 1
nmap t <Plug>Sneak_s
nmap T <Plug>Sneak_S
vmap t <Plug>Sneak_s
vmap T <Plug>Sneak_S

" Búsquedas en ficheros
let g:grepper = {}
let g:grepper.tools = ["rg"]
let g:grepper.highlight = 1
let g:grepper.stop = 50000
let g:grepper.rg = { "grepprg": "rg --vimgrep --hidden -S" }
nmap <Leader>a :GrepperRg<space>

" Búsqueda del texto seleccionado
nmap O <plug>(GrepperOperator)
nmap OO Oiw
vmap O <plug>(GrepperOperator)

" Splitjoin
let g:splitjoin_join_mapping = "J"
let g:splitjoin_split_mapping = "r\<cr>"
nmap S r<cr>

" Switch
let g:switch_mapping = "\<leader>w"

" Targets
let g:targets_separators = ', . ; : + - = ~ _ * # | \ & $'
let g:targets_pairs = '() {} [] <>'

" ####### PROGRAMACIÓN #######
autocmd Filetype ruby,javascript call SetProgrammingOptions()
function SetProgrammingOptions()
  " Navegación por métodos
  nmap <buffer> { [m
  nmap <buffer> } ]m

  " Autoindentado al pegar
  nnoremap <silent> <Plug>PasteIndent p=`]<C-o> :call repeat#set("\<Plug>PasteIndent", v:count)<cr>
  nnoremap <silent> <Plug>PasteAbove P=`]<C-o> :call repeat#set("\<Plug>PasteAbove")<cr>
  nmap <buffer> p <Plug>PasteIndent
  nmap <buffer> P <Plug>PasteAbove
endfunction

autocmd Filetype css,scss,elixir,html,javascript,readline,ruby,eruby,tmux,zsh call SetProgrammingChars()
function SetProgrammingChars()
  " Al programar, los acentos se convierten en caracteres que solo se escriben al programar
  map! <buffer> í {
  map! <buffer> ó }
  imap <buffer> ú \
  map! <buffer> é =
  imap <buffer> ñ [
  map! <buffer> Ñ ]
endfunction

" Mapas en modos de vim iguales que al programar
cmap ú \
map í {
map ó }

autocmd Filetype * if index(["gitcommit"], &ft) < 0
                      \| nmap é =
                      \| endif
autocmd Filetype * if index(["fugitive","gitcommit"], &ft) < 0
                      \| nmap <buffer> éé ==
                      \| endif

" Insertar punto de ruptura
autocmd FileType eruby nmap <buffer> <Leader>p O<% binding.pry %><Esc>
autocmd FileType ruby nmap <buffer> <Leader>p Obinding.pry<Esc>

" ####### VARIOS #######
" Firma con la canción que se está escuchando
nnoremap <Leader>p G:r!nowplaying<cr>O--<Esc>0k

" Configuración local
let fichero_configuracion_local='~/.vimrc.local'
if filereadable(expand(fichero_configuracion_local))
  exec 'source ' . fichero_configuracion_local
endif

" Carga en 'arglist' los ficheros de la 'quickfix list'
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
